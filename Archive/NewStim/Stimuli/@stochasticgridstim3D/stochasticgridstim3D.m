function [sgs] = stochasticgridstim3D(SGSp,OLDSTIM)%  NewStim package:  STOCHASTICGRIDSTIM%%  THESGS = STOCHASTICGRIDSTIM(PARAMETERS)%%  Creates a stochasticgridstim object.  A stochasticgridstim allows one to%  specify a grid on the screen and to specify a distribution of colors which%  will occupy the squares on the grid.  The value for each square on the grid%  is chosen randomly and independently for each square.  One of its most common%  uses is to create a field of 'snow'.%%  PARAMETERS can either be the string 'graphical' (which will prompt the user%  to enter all of the parameter values), the string 'default' (which will%  use default parameter values), or a structure.  When using 'graphical', one%  may also use%%  SGS = STOCHASTICGRIDSTIM('graphical',OLDSGS)%%  where OLDSGS is a previously created stochasticgridstim object.  This will%  set the default parameter values to those of OLDSGS.%%  If passing a structure, the structure should have the following fields:%  (dimensions of parameters are given as [M N]; fields are case-sensitive):%%  [1x4] rect         - Location of stimulus on background window%                       [top_x top_y bottom_x bottom_y]%  [1x3] BG           - Background color [r g b]%  [nx3] values       - Colors which may appear on the grid squares%  [nx1] dist         - Relative probability distribution of each color%                       (i.e., prob(values(i,:)) = dist(i)/sum(dist) )%  [1x2] pixSize      - Size of blocks in x, y: [X Y].  If X and Y are less%                       than one, then it uses that fraction of the total%                       width and height, respectively.  Note that the blocks%                       must _exactly_ fill up the stimulus rect.%  [1x1] N            - Number of frames to make%  [1x1] fps          - Speed at which to show the frames, in frames per second.% [35x1] randState    - The random state to use as the seed for generating%                       the random numbers.  Ex:rand('state').  See 'help rand'.% [cell] dispprefs    - Sets displayprefs fields, or use {} for default values.%%   Questions to vanhoosr@brandeis.edu%specific warning off does not work in matlab 5.3%warning('OFF','MATLAB:RandStream:ReadingInactiveLegacyGeneratorState');%Default parameters:default_p = struct ( 'BG', [128 128 128], ...            % background colour    'distR', [100;100;100;], ...                         % relative distribution of three colours    'distL', [100;100;100;], ...    'rect',[0 0 1680 1050],...                           % what part of the screen wil be used?    'N',2,...                                           % amount of frames    'fps',2,...                                          % frames per second    'randState', rand('state'),...                       % randomness    'eyes', 2,...                                        % 0=Left, 1=Right, 2=Both Eyes    'valuesL', [50 50 50; 100 100 100; 180 180 180], ... % colour schemes left and right    'valuesR', [50 50 50; 100 100 100; 180 180 180], ...    'posR',[500 500 700 700],...                        % position of individual grids    'posL',[0 0 200 200],...    'pixSizeR', [336 210],...                              % gridpixel size left and right    'pixSizeL', [336 210],...    'similarity', 1);       % images can be generated seperately (0=different,1=same)% when the images should be the same it only uses the right eyedefault_p.dispprefs = {};finish = 1;if nargin<2  oldstim.SGSp = default_p;else  oldstim = OLDSTIM; end;if nargin<1    SGSp=default_p;elseif ischar(SGSp)    switch SGSp        case 'default'            SGSp = default_p;        case 'graphical'            SGSp = get_graphical_input(oldstim);        otherwise            warning('stochasticgridstim3D: Unknown argument')    endend% Sets the parameters to default values if no parameters are given.[good, err] = verifystochasticgridstim(SGSp);if ~good, error(['Could not create stochasticgridstim: ' err]); end;% Checks whether parameters entered are ok.if finish == 1;    dp = {'fps', SGSp.fps, 'rect',SGSp.rect, 'frames', 1:SGSp.N, ...        SGSp.dispprefs{:}};    s = stimulus(5);    sgs = class(struct('SGSp',SGSp),'stochasticgridstim3D',s);    sgs.stimulus = setdisplayprefs(sgs.stimulus,displayprefs(dp));else    sgs = [];endfunction params = get_graphical_input(oldstim)oldsP = struct(oldstim);SGSp = oldsP.SGSp;rect_str = mat2str(SGSp.rect);bg_str = mat2str(SGSp.BG);valuesL_str = mat2str(SGSp.valuesL);valuesR_str = mat2str(SGSp.valuesR);posL_str = mat2str(SGSp.posL);posR_str = mat2str(SGSp.posR);distL_str = mat2str(SGSp.distL);distR_str = mat2str(SGSp.distR);pixSizeL_str = mat2str(SGSp.pixSizeL);pixSizeR_str = mat2str(SGSp.pixSizeR);N_str = num2str(SGSp.N);fps_str = num2str(SGSp.fps);rs_str = '<copied from previous stim>';dp_str = wimpcell2str(SGSp.dispprefs);% create figure and get inputh0 = figure('Color',[0.8 0.8 0.8], 'Position',[200 200 500 700]);settoolbar(h0,'none'); set(h0,'menubar','none');               guicreate('Text','String','New stochasticgridstim object','fontsize',26,'height',50,'top','top','left','left','width','auto');               guicreate('Text','String','Location and colours:','fontsize',12,'width',250);               guicreate('Text','String','Position of whole image on screen','fontsize',10,'tooltipstring','[top_x top_y bottom_x bottom_y]','width',250,'move','right');rect_ctl =     guicreate('edit','String',rect_str,'fontsize',9,'width',200,'BackgroundColor',[1 1 1]);               guicreate('text','String','Placement right-eye image','fontsize',10,'tooltipstring','[top_x top_y bottom_x bottom_y] in whole image, make sure it fits in the window you have specified','left','left','width',250,'move','right');imageR_ctl =   guicreate('edit','String',posR_str,'fontsize',9,'width',200,'BackgroundColor',[1 1 1]);               guicreate('text','String','Placement left-eye image','fontsize',10,'tooltipstring','[top_x top_y bottom_x bottom_y] in whole image','left','left','width',250,'move','right');imageL_ctl =   guicreate('edit','String',posL_str,'fontsize',9,'width',200,'BackgroundColor',[1 1 1]);                              guicreate('Text','String','Background colour','fontsize',10,'tooltipstring','[r g b] all 0-255 values','width',250,'move','right');bg_ctl =       guicreate('edit','String',bg_str,'width',200,'fontsize',9,'BackgroundColor',[1 1 1]);                              guicreate('Text','String','Grid colours','fontsize',10,'tooltipstring','[r g b] all 0-255 values, as many colours as you like, as long as the amount of probabilities match','width',250,'move','right');values_ctl =   guicreate('edit','String',valuesL_str,'width',200,'fontsize',9,'BackgroundColor',[1 1 1]);               guicreate('Text','String','Relative distribution of the colours','fontsize',10,'tooltipstring','make sure the amount of probabilities matches the amount of colours','width',250,'move','right');dist_ctl =     guicreate('edit','String',distL_str,'width',200,'fontsize',9,'BackgroundColor',[1 1 1]);               guicreate('text','String',''); %space               guicreate('Text','String','Computing the stimulus:','fontsize',12,'width',250);               guicreate('Text','String','Number of frames','fontsize',10,'width',250,'move','right');N_ctl =        guicreate('edit','String',N_str,'width',100,'fontsize',9,'BackgroundColor',[1 1 1]);               guicreate('Text','String','Frames per second','fontsize',10,'tooltipstring','positive non-zero number ','width',250,'move','right');fps_ctl =      guicreate('edit','String',fps_str,'width',100,'fontsize',9,'BackgroundColor',[1 1 1]);               guicreate('Text','String','Grid-pixel size','fontsize',10,'tooltipstring','[X Y] make sure that the pixels exactly fit in the right and left stimulus windows or fill in fractions','width',250,'move','right');pixSize_ctl =  guicreate('edit','String',pixSizeL_str,'width',100,'fontsize',9,'BackgroundColor',[1 1 1]);               guicreate('Text','String','Randomstate','fontsize',10,'tooltipstring','use rand(''state'') or enter a variable name','width',250,'move','right');rs_ctl =       guicreate('edit','String','rand(''state'')','width',100,'fontsize',9,'BackgroundColor',[1 1 1]);               guicreate('text','String',''); %space               guicreate('text','String','Eye(s) you would you like to stimulate:','fontsize',10,'width','auto');lefteye_ckb =  guicreate('checkbox','value',1,'String','Left' ,'width',70,'fontsize',8,'move','right');righteye_ckb = guicreate('checkbox','value',1,'String','Right','fontsize',8);               guicreate('text','String',''); %space               guicreate('Text','String','Set any displayprefs options here:','fontsize',10,'tooltipstring','example: {''BGpretime'',1}, ...','width',250);dp_ctl =       guicreate('edit','String',{'{''BGpretime'',2}'},'width',400,'fontsize',9,'BackgroundColor',[1 1 1], 'height', 60);               set(dp_ctl,'max',10);               guicreate('text','String',''); %space               guicreate('text','String',''); %spaceok_ctl =       guicreate('Pushbutton','String','OK','Callback','set(gcbo,''userdata'',[1]);uiresume(gcf);','userdata',0,'move','right');cancel_ctl =   guicreate('Pushbutton','String','Cancel','Callback','set(gcbo,''userdata'',[1]);uiresume(gcf);','userdata',0, 'move','right');help_ctl =     guicreate('Pushbutton','String','Help','Callback','textbox(''stochasticgridstim help'',help(''stochasticgridstim''));');% check for syntax errorserror_free = 0;sgsp = [];while ~error_free,    drawnow;     uiwait(h0);        if get(cancel_ctl,'userdata')==1,        error_free = 1;    else % it was OK        rect_str =   get(rect_ctl,'String');         bg_str =     get(bg_ctl,'String');        values_str=  get(values_ctl,'String');         dist_str =   get(dist_ctl,'String');        pixSize_str= get(pixSize_ctl,'String');         N_str =      get(N_ctl,'String');        fps_str =    get(fps_ctl,'String');         rs_str =     get(rs_ctl,'String');        dp_str =     get(dp_ctl,'String');        dp_str =     [dp_str{:}];        imageR_str = get(imageR_ctl,'String');        imageL_str = get(imageL_ctl,'String');        left_eye =   get(lefteye_ckb,'value');        right_eye =  get(righteye_ckb,'value');                        so = 0; % syntax_okay;        if so == 0;             if left_eye==0 & right_eye==0               errordlg('No eyes selected'); so=0;            elseif left_eye==1 & right_eye==0               eyes = 0; so=1;            elseif left_eye==0 & right_eye==1               eyes = 1; so=1;            elseif left_eye==1 & right_eye==1               eyes = 2; so=1;            end;        end;        try 			rect = eval(rect_str);        catch, 			errordlg('Syntax error in Rect');so=0; 		end;        try 			BG = eval(bg_str);        catch,			errordlg('Syntax error in BG');so=0; 		end;        try 			values=eval(values_str);        catch,			errordlg('Syntax error in values');so=0;		end        valuesR=values; valuesL=values;        try 			dist = eval(dist_str);        catch,			errordlg('Syntax error in dist');so=0;		end;        distR=dist; distL=dist;        try			pixSize=eval(pixSize_str);        catch, 			errordlg('Syntax error in pixsize');so=0; 		end;        pixSizeR=pixSize;pixSizeL=pixSize;        try			N = eval(N_str);        catch,			errordlg('Syntax error in N'); so=0;		end;        try 			fps=eval(fps_str);        catch,			errordlg('Syntax error in fps'); so=0;		end;        try			imageR=eval(imageR_str);        catch,			errordlg('Syntax error in placement right eye'); so=0; 		end;        posR=imageR;        try 			imageL=eval(imageL_str);        catch,			errordlg('Syntax error in placement left eye'); so=0; 		end;        posL=imageL;        if strcmp(rs_str,'<copied from previous stim>')&~isempty(oldstim),            randState = SGSparams.randState;        else            try 				randState=eval(rs_str);            catch, 				errordlg('Syntax error in randState');so=0; 			end        end;        try 			dp=eval(dp_str);        catch, 			errordlg('Syntax error in displayprefs'); so=0;		end;                %FYI, similarity is now set to 1, but there is a framework to         %program separate images to be displayed.                 if so,            sgsp=struct('BG',BG,'distR',distR,'distL',distL,'rect',rect,'N',...                N,'fps',fps,'randState',randState,'eyes',eyes,'valuesL',valuesL,...                'valuesR',valuesR,'posR',posR,'posL',posL,'pixSizeR',pixSizeR,...                'pixSizeL',pixSizeL,'similarity', 1);            sgsp.dispprefs = dp;                        [good, err] = verifystochasticgridstim(sgsp);            if ~good, errordlg(['Parameter value invalid: ' err]);                set(ok_ctl,'userdata',0);            else                error_free = 1;            end;        else            set(ok_ctl,'userdata',0);        end;    end;end;if get(ok_ctl,'userdata')==1    params = sgsp;else    params = []; end;delete(h0);function str = wimpcell2str(theCell)%1-dim cells only, only chars and matriciesstr = '{  ';for i=1:length(theCell),    if ischar(theCell{i})        str = [str '''' theCell{i} ''', '];    elseif isnumeric(theCell{i}),        str = [str mat2str(theCell{i}) ', '];    end;end;str = [str(1:end-2) '}'];